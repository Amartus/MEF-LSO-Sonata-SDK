@startuml
skinparam {
    ClassBackgroundColor White
    ClassBorderColor Black
}

class AlternateProductOfferingProposal {

    alternateProductOffering: ProductOfferingRef
    id*: String
    installationInterval: TimeInterval
}

AlternateProductOfferingProposal *-->"1" MEFProductExtension : alternateProduct


class Error {

    code*: String
    message: String
    reason*: String
    referenceError: Uri
    status: String
}



class EventSubscription {

    callback*: String
    id*: String
    query: String
}



class EventSubscriptionInput {

    callback*: String
    query: String
}



class FieldedAddress {

    city*: String
    country*: String
    locality: String
    postcode: String
    postcodeExtension: String
    stateOrProvince: String
    streetName*: String
    streetNr: String
    streetNrLast: String
    streetNrLastSuffix: String
    streetNrSuffix: String
    streetSuffix: String
    streetType: String
}
RelatedPlaceRefOrValue <|-- FieldedAddress

FieldedAddress *-->"*" GeographicSubAddress : geographicSubAddress


class FormattedAddress {

    addrLine1*: String
    addrLine2: String
    city*: String
    country*: String
    locality: String
    postcode: String
    postcodeExtension: String
    stateOrProvince: String
}
RelatedPlaceRefOrValue <|-- FormattedAddress



class GeographicSubAddress {

    buildingName: String
    href: String
    id: String
    levelNumber: String
    levelType: String
    name: String
    privateStreetName: String
    privateStreetNumber: String
}

GeographicSubAddress *-->"*" MEFSubUnit : subUnit


class MEFGeographicLocation {

    spatialRef*: String
}
RelatedPlaceRefOrValue <|-- MEFGeographicLocation

MEFGeographicLocation *-->"1" MEFGeographicPoint : geographicPoint


class MEFGeographicPoint {

    x*: String
    y*: String
}



enum MEFPOQItemTaskStateType {

    accepted
    terminatedWithError
    terminatedWithError.insufficientInformationProvided
    inProgress
    done.abandoned
    done
}
enum MEFPOQTaskStateType {

    accepted
    terminatedWithError
    terminatedWithError.insufficientInformationProvided
    inProgress
    done.unableToProvide
    done
}
class MEFProductConfiguration {

    @schemaLocation: Uri
    @type: String
}



class MEFProductExtension {

}

MEFProductExtension *--> MEFProductConfiguration : productConfiguration


class MEFProductRefOrValue {

    href: String
    id: String
}

MEFProductRefOrValue *-->"*" RelatedPlaceRefOrValue : place
MEFProductRefOrValue *--> MEFProductConfiguration : productConfiguration
MEFProductRefOrValue *-->"*" ProductRelationship : productRelationship
MEFProductRefOrValue *--> ProductSpecificationRef : productSpecification


class MEFStateChange {

    changeDate*: DateTime
    changeReason: String
    state*: String
}



class MEFSubUnit {

    subUnitNumber*: String
    subUnitType*: String
}



class PlaceRef {

    @referredType*: String
    href: String
    id*: String
}
RelatedPlaceRefOrValue <|-- PlaceRef



class ProductOfferingQualification {

    effectiveQualificationDate: DateTime
    expectedPOQCompletionDate: DateTime
    href: String
    id*: String
    state*: MEFPOQTaskStateType
}
ProductOfferingQualification_Common <|-- ProductOfferingQualification

ProductOfferingQualification *-->"1..*" ProductOfferingQualificationItem : productOfferingQualificationItem
ProductOfferingQualification *-->"*" MEFStateChange : stateChange


class ProductOfferingQualificationItem {

    guaranteedUntilDate: DateTime
    installationInterval: TimeInterval
    serviceConfidenceReason: String
    serviceabilityConfidence: MEFServiceabilityColor
    state*: MEFPOQItemTaskStateType
    terminationError: TerminationError[]
}
ProductOfferingQualificationItem_Common <|-- ProductOfferingQualificationItem

ProductOfferingQualificationItem *-->"*" AlternateProductOfferingProposal : alternateProductOfferingProposal
ProductOfferingQualificationItem *-->"*" MEFStateChange : stateChange


class ProductOfferingQualificationItem_Create {

}
ProductOfferingQualificationItem_Common <|-- ProductOfferingQualificationItem_Create



class ProductOfferingQualificationItem_Common {

    action*: ProductActionType
    expectedActivationDate: DateTime
    id*: String
    productOffering: ProductOfferingRef
}

ProductOfferingQualificationItem_Common *-->"1" MEFProductRefOrValue : product
ProductOfferingQualificationItem_Common *-->"*" QualificationItemRelationship : qualificationItemRelationship
ProductOfferingQualificationItem_Common *-->"*" RelatedPartyRefOrValue : relatedParty


enum MEFServiceabilityColor {

    green
    yellow
    red
}
class ProductOfferingQualification_Create {

}
ProductOfferingQualification_Common <|-- ProductOfferingQualification_Create

ProductOfferingQualification_Create *-->"1..*" ProductOfferingQualificationItem_Create : productOfferingQualificationItem


class ProductOfferingQualification_Common {

    instantSyncQualification: Boolean
    projectId: String
    provideAlternative: Boolean
    requestedPOQCompletionDate: DateTime
}

ProductOfferingQualification_Common *-->"1..*" RelatedPartyRefOrValue : relatedParty


class ProductOfferingRef {

    @referredType: String
    href: String
    id*: String
    name: String
}



class ProductRelationship {

    @referredType: String
    href: String
    id: String
    name: String
    relationshipType*: String
}



class ProductSpecificationRef {

    @referredType: String
    href: String
    id*: String
    name: String
}

ProductSpecificationRef *--> TargetProductSchema : targetProductSchema


class QualificationItemRelationship {

    id: String
    relationshipType: String
}



class ReferencedAddress {

    externalReferenceId*: String
    externalReferenceType*: String
}
RelatedPlaceRefOrValue <|-- ReferencedAddress



class RelatedPartyRefOrValue {

    @referredType: String
    emailAddress: String
    href: String
    id: String
    name*: String
    number*: String
    numberExtension: String
    role*: String
}



class RelatedPlaceRefOrValue {

    @schemaLocation: Uri
    @type*: String
    name: String
    role*: String
}



class TargetProductSchema {

}



class TerminationError {

    id: String
    value: String
}



class TimeInterval {

    amount: Integer
    timeUnit: TimeUnit
}



enum TimeUnit {

    calendarDays
    calendarHours
    calendarMinutes
    businessDays
    businessHours
    businessMinutes
}
enum ProductActionType {

    add
    modify
    delete
    noChange
}
@enduml