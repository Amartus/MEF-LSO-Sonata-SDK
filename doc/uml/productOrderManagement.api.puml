@startuml
skinparam {
    ClassBackgroundColor White
    ClassBorderColor Black
}

class CancelProductOrder {

    id: string 
    href: string 
    cancellationDeniedReason: string 
    cancellationReason: string 
    effectiveCancellationDate: date-time 
    requestedCancellationDate: date-time 
    state: TaskStateType 
    @baseType: string 
    @schemaLocation: uri 
    @type: string 
}

CancelProductOrder *--> MEFProductOrderRef : productOrder


class CancelProductOrder_Create {

    cancellationDeniedReason: string 
    cancellationReason: string 
    requestedCancellationDate: date-time 
    @baseType: string 
    @schemaLocation: uri 
    @type: string 
}

CancelProductOrder_Create *-->"1" MEFProductOrderRef : productOrder


class Error400 {

    code*: string 
}
Error <|-- Error400



class Error401 {

    code*: string 
}
Error <|-- Error401



class Error403 {

    code*: string 
}
Error <|-- Error403



class Error404 {

    code*: string 
}
Error <|-- Error404



class Error405 {

    code*: string 
}
Error <|-- Error405



class Error409 {

    code*: string 
}
Error <|-- Error409



class Error422 {

    code*: string 
    propertyPath: string 
}
Error <|-- Error422



class Error500 {

    code*: string 
}
Error <|-- Error500



class Error501 {

    code*: string 
}
Error <|-- Error501



class Error {

    reason*: string 
    message: string 
    status: string 
    referenceError: uri 
}



class EventSubscription {

    id*: string 
    callback*: string 
    query: string 
}



class EventSubscriptionInput {

    callback*: string 
    query: string 
}



class FieldedAddress {

    city*: string 
    country*: string 
    locality: string 
    postcode: string 
    postcodeExtension: string 
    stateOrProvince: string 
    streetName*: string 
    streetNr: string 
    streetNrLast: string 
    streetNrLastSuffix: string 
    streetNrSuffix: string 
    streetSuffix: string 
    streetType: string 
}
RelatedPlaceRefOrValue <|-- FieldedAddress

FieldedAddress *--> GeographicSubAddress : geographicSubAddress


class FormattedAddress {

    addrLine1*: string 
    addrLine2: string 
    city*: string 
    country*: string 
    locality: string 
    postcode: string 
    postcodeExtension: string 
    stateOrProvince: string 
}
RelatedPlaceRefOrValue <|-- FormattedAddress



class GeographicSubAddress {

    buildingName: string 
    id: string 
    levelNumber: string 
    levelType: string 
    privateStreetName: string 
    privateStreetNumber: string 
}

GeographicSubAddress *-->"*" MEFSubUnit : subUnit


class GlobalAddressId {

    externalReferenceId*: string 
    externalReferenceType*: string 
}
RelatedPlaceRefOrValue <|-- GlobalAddressId



class MEFBillingAccountRefOrValue {

    id*: string 
    @type: string 
}

MEFBillingAccountRefOrValue *--> MEFBillingContact : billingContact


class MEFBillingContact {

    contactName*: string 
    emailAddress*: string 
    number*: string 
    numberExtension: string 
    streetAddress*: string 
    @type: string 
}



class MEFGeographicLocation {

    spatialRef*: string 
}
RelatedPlaceRefOrValue <|-- MEFGeographicLocation

MEFGeographicLocation *-->"1" MEFGeographicPoint : geographicPoint


class MEFGeographicPoint {

    x*: string 
    y*: string 
}



class MEFOrderMessage {

    code: string 
    correctionRequired: boolean 
    field: string 
    messageInformation: string 
    severity: MEFSeverity 
    @type: string 
}



class MEFProductConfiguration {

    @baseType: string 
    @schemaLocation: uri 
    @type*: string 
}



class MEFProductOrderItemStateChange {

    changeDate: date-time 
    changeReason: string 
    state: MEFProductOrderItemStateType 
}



class MEFProductOrderItem_Create {

    id: string 
    pricingReference: string 
    pricingTerm: integer 
    action: OrderItemActionType 
    pricingMethod: MEFPricingMethod 
    @type: string 
}

MEFProductOrderItem_Create *--> MEFBillingAccountRefOrValue : billingAccount
MEFProductOrderItem_Create *-->"*" OrderPrice : itemPrice
MEFProductOrderItem_Create *-->"*" OrderTerm : itemTerm
MEFProductOrderItem_Create *--> MEFProductRefOrValueForOrder : product
MEFProductOrderItem_Create *--> ProductOfferingRef : productOffering
MEFProductOrderItem_Create *--> ProductOfferingQualificationItemRef : productOfferingQualificationItem
MEFProductOrderItem_Create *-->"*" OrderItemRelationship : productOrderItemRelationship
MEFProductOrderItem_Create *--> MEFQuoteItemRef : quoteItem
MEFProductOrderItem_Create *-->"*" RelatedPartyRefOrValue : relatedParty


class MEFProductOrderRef {

    id*: string 
    href: string 
    externalId: string 
    orderVersion: string 
    state: MEFProductOrderStateType 
    @type: string 
    @referredType: uri 
}



class MEFProductOrderStateChange {

    changeDate: date-time 
    changeReason: string 
    state: MEFProductOrderStateType 
}



class MEFProductOrderSummary {

    id*: string 
    externalId*: string 
    orderDate*: date-time 
    state*: MEFProductOrderStateType 
}



class MEFProductRefOrValueForOrder {

    id: string 
    href: string 
    buyerProductId: string 
    @type: string 
}

MEFProductRefOrValueForOrder *-->"*" RelatedPlaceRefOrValue : place
MEFProductRefOrValueForOrder *--> MEFProductConfiguration : productConfiguration
MEFProductRefOrValueForOrder *-->"*" ProductRelationship : productRelationship
MEFProductRefOrValueForOrder *--> ProductSpecificationRef : productSpecification


class MEFQuoteItemRef {

    id*: string 
    quoteHref: string 
    quoteId: string 
    @type: string 
    @referredType: uri 
}



class MEFSubUnit {

    subUnitNumber*: string 
    subUnitType*: string 
}



class Money {

    unit: string 
    value: float 
}



class Note {

    id: string 
    author*: string 
    date*: date-time 
    text*: string 
    @type: string 
}



class OrderItemRelationship {

    id*: string 
    relationshipType*: string 
    @type: string 
}



class OrderPrice {

    description: string 
    name: string 
    priceType: string 
    recurringChargePeriod: string 
    @type: string 
}

OrderPrice *--> Price : price


class OrderTerm {

    description: string 
    name: string 
    @type: string 
}

OrderTerm *--> Quantity : duration


class PlaceRef {

    @referredType*: string 
    href: string 
    id*: string 
}
RelatedPlaceRefOrValue <|-- PlaceRef



class Price {

    taxRate: float 
    @type: string 
}

Price *--> Money : dutyFreeAmount
Price *--> Money : taxIncludedAmount


class ProductOfferingQualificationItemRef {

    id*: string 
    alternateProductProposalId: string 
    productOfferingQualificationHref: string 
    productOfferingQualificationId*: string 
    @type: string 
    @referredType: string 
}



class ProductOfferingRef {

    id*: string 
    href: string 
    name: string 
    @type: string 
    @referredType: string 
}



class ProductOrder {

    id: string 
    href: string 
    buyerRequestDate: date-time 
    cancellationDate: date-time 
    cancellationReason: string 
    completionDate: date-time 
    description: string 
    expectedCompletionDate: date-time 
    expeditePriority: boolean 
    externalId: string 
    orderDate: date-time 
    orderVersion: string 
    pricingReference: string 
    pricingTerm: integer 
    priority: string 
    projectId: string 
    relatedBuyerPON: string 
    requestedCompletionDate: date-time 
    requestedStartDate: date-time 
    tspRestorationPriority: string 
    desiredResponse: MEFDesiredOrderResponse 
    orderActivity: MEFOrderActivity 
    pricingMethod: MEFPricingMethod 
    state: MEFProductOrderStateType 
    @baseType: string 
    @schemaLocation: uri 
    @type: string 
}

ProductOrder *--> MEFBillingAccountRefOrValue : billingAccount
ProductOrder *-->"*" Note : note
ProductOrder *-->"*" MEFOrderMessage : orderMessage
ProductOrder *-->"1..*" ProductOrderItem : productOrderItem
ProductOrder *-->"*" RelatedPartyRefOrValue : relatedParty
ProductOrder *-->"*" MEFProductOrderStateChange : stateChange


class ProductOrderItem {

    id*: string 
    pricingReference: string 
    pricingTerm: integer 
    action*: OrderItemActionType 
    pricingMethod: MEFPricingMethod 
    state: MEFProductOrderItemStateType 
    @type: string 
}

ProductOrderItem *--> MEFBillingAccountRefOrValue : billingAccount
ProductOrderItem *-->"*" OrderPrice : itemPrice
ProductOrderItem *-->"*" OrderTerm : itemTerm
ProductOrderItem *--> MEFProductRefOrValueForOrder : product
ProductOrderItem *-->"1" ProductOfferingRef : productOffering
ProductOrderItem *--> ProductOfferingQualificationItemRef : productOfferingQualificationItem
ProductOrderItem *-->"*" OrderItemRelationship : productOrderItemRelationship
ProductOrderItem *--> MEFQuoteItemRef : quoteItem
ProductOrderItem *-->"*" RelatedPartyRefOrValue : relatedParty
ProductOrderItem *-->"*" MEFProductOrderItemStateChange : stateChange


class ProductOrder_Create {

    buyerRequestDate*: date-time 
    description: string 
    expeditePriority: boolean 
    externalId*: string 
    orderVersion*: string 
    pricingReference: string 
    pricingTerm: integer 
    priority: string 
    projectId: string 
    relatedBuyerPON: string 
    requestedCompletionDate*: date-time 
    requestedStartDate: date-time 
    tspRestorationPriority: string 
    desiredResponse*: MEFDesiredOrderResponse 
    orderActivity*: MEFOrderActivity 
    pricingMethod: MEFPricingMethod 
    @baseType: string 
    @schemaLocation: uri 
    @type: string 
}

ProductOrder_Create *--> MEFBillingAccountRefOrValue : billingAccount
ProductOrder_Create *-->"*" Note : note
ProductOrder_Create *-->"*" MEFOrderMessage : orderMessage
ProductOrder_Create *-->"1..*" MEFProductOrderItem_Create : productOrderItem
ProductOrder_Create *-->"1..*" RelatedPartyRefOrValue : relatedParty


class ProductRelationship {

    id*: string 
    href: string 
    buyerProductId: string 
    name: string 
    relationshipType*: string 
    @type: string 
    @referredType: string 
}



class ProductSpecificationRef {

    id*: string 
    href: string 
    name: string 
    @type: string 
    @referredType: string 
}

ProductSpecificationRef *--> TargetProductSchema : targetProductSchema


enum MEFDesiredOrderResponse {

    confirmationAndEngineeringDesign
    confirmationOnly
    none
}
class Quantity {

    amount: float 
    units: string 
}



class RelatedPartyRefOrValue {

    emailAddress*: string 
    name*: string 
    number*: string 
    numberExtension: string 
    role*: string 
    @type: string 
    @referredType: string 
}



class RelatedPlaceRefOrValue {

    @schemaLocation: uri 
    @type*: string 
    role*: string 
}



class TargetProductSchema {

    @baseType: string 
    @schemaLocation*: uri 
    @type*: string 
}



enum MEFOrderActivity {

    install
    change
    disconnect
}
enum MEFPricingMethod {

    tariff
    contract
    individualCaseBasis
    other
}
enum MEFProductOrderItemStateType {

    acknowledged
    rejected
    pending
    held
    inProgress
    inProgress.configured
    cancelled
    completed
    failed
    assessingCancellation
    pendingCancellation
}
enum MEFProductOrderStateType {

    acknowledged
    rejected
    pending
    held
    inProgress
    inProgress.configured
    inProgress.confirmed
    inProgress.jeopardy
    cancelled
    completed
    failed
    partial
    assessingCancellation
    pendingCancellation
}
enum MEFSeverity {

    error
    information
}
enum TaskStateType {

    accepted
    terminatedWithError
    inProgress
    done
}
enum OrderItemActionType {

    add
    modify
    delete
}
@enduml
