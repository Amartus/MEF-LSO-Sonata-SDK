@startuml
skinparam {
    ClassBackgroundColor White
    ClassBorderColor Black
}

class Error400 {

    code*: string 
}
Error <|-- Error400



class Error401 {

    code*: string 
}
Error <|-- Error401



class Error403 {

    code*: string 
}
Error <|-- Error403



class Error404 {

    code*: string 
}
Error <|-- Error404



class Error409 {

    code*: string 
}
Error <|-- Error409



class Error422 {

    code*: string 
    propertyPath: string 
}
Error <|-- Error422



class Error500 {

    code*: string 
}
Error <|-- Error500



class Error {

    reason*: string 
    message: string 
    status: string 
    referenceError: uri 
}



class FieldedAddress {

    city*: string 
    country*: string 
    locality: string 
    postcode: string 
    postcodeExtension: string 
    stateOrProvince: string 
    streetName*: string 
    streetNr: string 
    streetNrLast: string 
    streetNrLastSuffix: string 
    streetNrSuffix: string 
    streetSuffix: string 
    streetType: string 
}
RelatedPlaceRefOrValue <|-- FieldedAddress

FieldedAddress *--> GeographicSubAddress : geographicSubAddress


class FormattedAddress {

    addrLine1*: string 
    addrLine2: string 
    city*: string 
    country*: string 
    locality: string 
    postcode: string 
    postcodeExtension: string 
    stateOrProvince: string 
}
RelatedPlaceRefOrValue <|-- FormattedAddress



class GeographicAddress {

    id: string 
    href: string 
    allowsNewSite: boolean 
    hasPublicSite: boolean 
    name: string 
    @schemaLocation: uri 
    @type: string 
}

GeographicAddress *--> FieldedAddress : fieldedAddress
GeographicAddress *--> FormattedAddress : formattedAddress
GeographicAddress *--> MEFGeographicLocation : geographicLocation
GeographicAddress *--> GlobalAddressId : globalAddressId


class GeographicAddressValidation {

    id: string 
    href: string 
    provideAlternative: boolean 
    validationDate: date-time 
    validationResult: string 
    @baseType: string 
    @schemaLocation: uri 
    @type: string 
}

GeographicAddressValidation *--> MEFSubmittedGeographicAddress : submittedGeographicAddress
GeographicAddressValidation *--> MEFValidatedGeographicAddress : validGeographicAddress


class GeographicAddressValidation_Create {

    provideAlternative*: boolean 
    @baseType: string 
    @schemaLocation: uri 
    @type: string 
}

GeographicAddressValidation_Create *-->"1" MEFSubmittedGeographicAddress : submittedGeographicAddress


class GeographicSubAddress {

    buildingName: string 
    id: string 
    levelNumber: string 
    levelType: string 
    privateStreetName: string 
    privateStreetNumber: string 
}

GeographicSubAddress *-->"*" MEFSubUnit : subUnit


class GlobalAddressId {

    externalReferenceId*: string 
    externalReferenceType*: string 
}
RelatedPlaceRefOrValue <|-- GlobalAddressId



class MEFGeographicLocation {

    spatialRef*: string 
}
RelatedPlaceRefOrValue <|-- MEFGeographicLocation

MEFGeographicLocation *-->"1" MEFGeographicPoint : geographicPoint


class MEFGeographicPoint {

    x*: string 
    y*: string 
}



class MEFSubUnit {

    subUnitNumber*: string 
    subUnitType*: string 
}



class MEFSubmittedGeographicAddress {

    @schemaLocation: uri 
    @type: string 
}

MEFSubmittedGeographicAddress *--> FieldedAddress : fieldedAddress
MEFSubmittedGeographicAddress *--> FormattedAddress : formattedAddress


class MEFValidatedGeographicAddress {

    id: string 
    allowsNewSite: boolean 
    hasPublicSite: boolean 
    isBestMatch*: boolean 
    @schemaLocation: uri 
    @type: string 
}

MEFValidatedGeographicAddress *--> FieldedAddress : fieldedAddress
MEFValidatedGeographicAddress *--> FormattedAddress : formattedAddress


class RelatedPlaceRefOrValue {

    @schemaLocation: uri 
    @type*: string 
    role*: string 
}



@enduml
