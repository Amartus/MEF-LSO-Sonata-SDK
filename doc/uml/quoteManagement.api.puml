@startuml
skinparam {
    ClassBackgroundColor White
    ClassBorderColor Black
}
scale 4096 width
class Duration {

    amount*: integer 
    units*: TimeUnit 
}



class Error400 {

    code*: string 
}
Error <|-- Error400



class Error401 {

    code*: string 
}
Error <|-- Error401



class Error403 {

    code*: string 
}
Error <|-- Error403



class Error404 {

    code*: string 
}
Error <|-- Error404



class Error405 {

    code*: string 
}
Error <|-- Error405



class Error422 {

    code*: string 
    propertyPath: string 
}
Error <|-- Error422



class Error500 {

    code*: string 
}
Error <|-- Error500



class Error501 {

    code*: string 
}
Error <|-- Error501



class Error {

    message: string 
    reason*: string 
    referenceError: uri 
}



class EventSubscription {

    id*: string 
    callback*: string 
    query: string 
}



class EventSubscriptionInput {

    callback*: string 
    query: string 
}



class FieldedAddress {

    city*: string 
    country*: string 
    locality: string 
    postcode: string 
    postcodeExtension: string 
    stateOrProvince: string 
    streetName*: string 
    streetNr: string 
    streetNrLast: string 
    streetNrLastSuffix: string 
    streetNrSuffix: string 
    streetSuffix: string 
    streetType: string 
}
RelatedPlaceRefOrValue <|-- FieldedAddress

FieldedAddress *--> GeographicSubAddress : geographicSubAddress


class FormattedAddress {

    addrLine1*: string 
    addrLine2: string 
    city*: string 
    country*: string 
    locality: string 
    postcode: string 
    postcodeExtension: string 
    stateOrProvince: string 
}
RelatedPlaceRefOrValue <|-- FormattedAddress



class GeographicAddressIdentifier {

    externalReferenceId*: string 
    externalReferenceType*: string 
}
RelatedPlaceRefOrValue <|-- GeographicAddressIdentifier



class GeographicAddressRef {

    href: string 
    id*: string 
}
RelatedPlaceRefOrValue <|-- GeographicAddressRef



class GeographicSiteRef {

    href: string 
    id*: string 
}
RelatedPlaceRefOrValue <|-- GeographicSiteRef



class GeographicSubAddress {

    buildingName: string 
    id: string 
    levelNumber: string 
    levelType: string 
    privateStreetName: string 
    privateStreetNumber: string 
}

GeographicSubAddress *-->"*" MEFSubUnit : subUnit


enum MEFEndOfTermAction {

    roll
    autoDisconnect
    autoRenew
}
class MEFGeographicPoint {

    spatialRef*: string 
    x*: string 
    y*: string 
    z: string 
}
RelatedPlaceRefOrValue <|-- MEFGeographicPoint



class MEFItemTerm {

    endOfTermAction: MEFEndOfTermAction 
}

MEFItemTerm *--> Duration : duration
MEFItemTerm *--> Duration : rollInterval


class MEFProductConfiguration {

    @schemaLocation: uri 
    @type*: string 
}



class MEFProductRefOrValueForQuote {

    href: string 
    id: string 
}

MEFProductRefOrValueForQuote *-->"*" RelatedPlaceRefOrValue : place
MEFProductRefOrValueForQuote *--> MEFProductConfiguration : productConfiguration
MEFProductRefOrValueForQuote *--> ProductOfferingRef : productOffering
MEFProductRefOrValueForQuote *-->"*" ProductRelationship : productRelationship


class MEFQuoteItem_Create {

}
MEFQuoteItem_Common <|-- MEFQuoteItem_Create



class MEFQuoteItem_Common {

    id*: string 
    dealReference: string 
    action*: MEFProductActionType 
    agreement: string 
}

MEFQuoteItem_Common *-->"*" Note : note
MEFQuoteItem_Common *--> MEFProductRefOrValueForQuote : product
MEFQuoteItem_Common *--> ProductOfferingQualificationItemRef : productOfferingQualificationItem
MEFQuoteItem_Common *-->"*" QuoteItemRelationship : quoteItemRelationship
MEFQuoteItem_Common *-->"*" RelatedContactInformation : relatedContactInformation
MEFQuoteItem_Common *--> Duration : requestedQuoteItemInstallationInterval
MEFQuoteItem_Common *--> MEFItemTerm : requestedQuoteItemTerm


class MEFQuoteStateChange {

    changeDate*: date-time 
    changeReason: string 
    state*: MEFQuoteStateType 
}



class MEFSubUnit {

    subUnitNumber*: string 
    subUnitType*: string 
}



class Money {

    unit: string 
    value: float 
}



class Note {

    id*: string 
    author*: string 
    date*: date-time 
    source*: NoteSourceType 
    text*: string 
}



class Price {

    taxRate: float 
}

Price *--> Money : dutyFreeAmount
Price *--> Money : taxIncludedAmount


class ProductOfferingQualificationItemRef {

    id*: string 
    alternateProductProposalId: string 
    productOfferingQualificationHref: string 
    productOfferingQualificationId*: string 
}



class ProductOfferingRef {

    id*: string 
    href: string 
}



class ProductRelationship {

    id*: string 
    groupingKey: string 
    href: string 
    relationshipType*: string 
}



class Quote {

    id*: string 
    href: string 
    effectiveQuoteCompletionDate: date-time 
    expectedQuoteCompletionDate: date-time 
    quoteDate: date-time 
    quoteLevel: MEFSellerQuoteLevel 
    state: MEFQuoteStateType 
}
Quote_Common <|-- Quote

Quote *-->"1..*" QuoteItem : quoteItem
Quote *-->"*" MEFQuoteStateChange : stateChange
Quote *--> TimePeriod : validFor


class QuoteItem {

    subjectToFeasibilityCheck: boolean 
    state: MEFQuoteItemStateType 
}
MEFQuoteItem_Common <|-- QuoteItem

QuoteItem *--> Duration : quoteItemInstallationInterval
QuoteItem *-->"*" QuotePrice : quoteItemPrice
QuoteItem *--> MEFItemTerm : quoteItemTerm
QuoteItem *-->"*" TerminationError : terminationError


class QuoteItemRelationship {

    id*: string 
    relationshipType*: string 
}



enum MEFBuyerQuoteLevel {

    budgetary
    firm
}
enum MEFChargePeriod {

    hour
    day
    week
    month
    year
}
enum MEFPriceType {

    recurring
    nonRecurring
    usageBased
}
enum MEFProductActionType {

    add
    modify
    delete
}
enum MEFQuoteItemStateType {

    approved.answered
    approved.orderable
    approved.orderableAlternate
    inProgress
    inProgress.draft
    rejected
    rejected.unableToProvide
    rejected.insufficientInformationProvided
    pending
}
enum MEFQuoteStateType {

    accepted
    approved.answered
    approved.orderable
    approved.orderableAlternate
    cancelled
    cancelled.insufficientInformationProvided
    cancelled.unableToProvide
    inProgress
    inProgress.draft
    rejected
    rejected.expired
    pending
}
enum MEFSellerQuoteLevel {

    budgetary
    firmSubjectToFeasibilityCheck
    firm
}
enum NoteSourceType {

    buyer
    seller
}
class QuoteOperationData {

    quoteId*: string 
    reason: string 
}



class QuotePrice {

    description: string 
    name: string 
    unitOfMeasure: string 
    priceType: MEFPriceType 
    recurringChargePeriod: MEFChargePeriod 
}

QuotePrice *--> Price : price


class Quote_Create {

}
Quote_Common <|-- Quote_Create

Quote_Create *-->"1..*" MEFQuoteItem_Create : quoteItem


class Quote_Common {

    description: string 
    externalId: string 
    instantSyncQuote*: boolean 
    projectId: string 
    requestedQuoteCompletionDate: date-time 
    buyerRequestedQuoteLevel*: MEFBuyerQuoteLevel 
}

Quote_Common *-->"*" Note : note
Quote_Common *-->"*" RelatedContactInformation : relatedContactInformation


class Quote_Find {

    id: string 
    effectiveQuoteCompletionDate: date-time 
    expectedQuoteCompletionDate: date-time 
    externalId: string 
    projectId: string 
    quoteDate: date-time 
    requestedQuoteCompletionDate: date-time 
    quoteLevel: MEFSellerQuoteLevel 
    state*: MEFQuoteStateType 
}

Quote_Find *-->"*" MEFQuoteStateChange : stateChange


class RelatedContactInformation {

    emailAddress*: string 
    name*: string 
    number*: string 
    numberExtension: string 
    organization: string 
    role*: string 
}

RelatedContactInformation *--> FieldedAddress : postalAddress


class RelatedPlaceRefOrValue {

    @schemaLocation: uri 
    @type*: string 
    role*: string 
}



class TerminationError {

    value: string 
}



class TimePeriod {

    endDateTime: date-time 
    startDateTime: date-time 
}



enum TimeUnit {

    calendarMonths
    calendarDays
    calendarHours
    calendarMinutes
    businessDays
    businessHours
    businessMinutes
}
@enduml
