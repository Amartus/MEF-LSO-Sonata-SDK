swagger: '2.0'
info:
  title: API GeographicAddress Management
  description: |-
    **GeographicAddress Management**

    This API allows to:

    *Retrieve a geographic address in seller database from an address id for a buyer
    *Validate geographic address data. Buyer will trigger an address validation request to get a valid address description and id from seller

    **In MEF context following restrictions apply:**
    Only POST operation for resource geographicAddressValidation is used.
    Event Subscription is not managed.
    Operation GET for geographicAddress could be only done with an id.

    Geographic Address API uses TMF 673 as template. 
  version: 5.0.0-RC
host: serverRoot
basePath: /mefApi/sonata/geographicAddressManagement/v5/
schemes:
  - https
consumes:
  - application/json;charset=utf-8
produces:
  - application/json;charset=utf-8
tags:
  - name: geographicAddressValidation
  - name: geographicAddress
  - name: events subscription
paths:
  /geographicAddressValidation:
    post:
      operationId: createGeographicAddressValidation
      summary: Creates a GeographicAddressValidation
      description: This operation creates a GeographicAddressValidation entity.
      tags:
        - geographicAddressValidation
      parameters:
        - name: geographicAddressValidation
          description: The GeographicAddressValidation to be created
          required: true
          schema:
            $ref: '#/definitions/GeographicAddressValidation_Create'
          in: body
      responses:
        '201':
          description: Created
          schema:
            $ref: '#/definitions/GeographicAddressValidation'
        '400':
          description: |-
            Bad Request
          schema:
            $ref: '#/definitions/Error400'
        '401':
          description: |-
            Unauthorized
          schema:
            $ref: '#/definitions/Error401'
        '403':
          description: |-
            Forbidden
          schema:
            $ref: '#/definitions/Error403'
        '409':
          description: Conflict
          schema:
            $ref: '#/definitions/Error409'
        '422':
          description: |-
            Unprocessable entity due to the business validation problems in the Quote or one of the Quote items
          schema:
              type: array
              items:
                $ref: '#/definitions/Error422'
        '500':
          description: |-
            Internal Server Error
          schema:
            $ref: '#/definitions/Error500'
  '/geographicAddress/{id}':
    get:
      operationId: retrieveGeographicAddress
      summary: Retrieves a GeographicAddress by ID
      description: This operation retrieves a GeographicAddress entity. Attribute selection is enabled for all first level attributes.
      tags:
        - geographicAddress
      parameters:
        - name: id
          description: Identifier of the GeographicAddress
          required: true
          type: string
          in: path
        - name: fields
          description: Comma-separated properties to provide in response
          required: false
          type: string
          in: query
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/GeographicAddress'
        '400':
          description: |-
            Bad Request
          schema:
            $ref: '#/definitions/Error400'
        '401':
          description: |-
            Unauthorized
          schema:
            $ref: '#/definitions/Error401'
        '403':
          description: |-
            Forbidden
          schema:
            $ref: '#/definitions/Error403'
        '404':
          description: >-
            Not Found
          schema:
            $ref: '#/definitions/Error404'
        '500':
          description: |-
            Internal Server Error
          schema:
            $ref: '#/definitions/Error500'
definitions:
  FieldedAddress:
    type: object
    description: 'A type of Address that has a discrete field and value for each type of boundary or identifier down to the lowest level of detail. For example “street number” is one field, “street name” is another field, etc.'
    required:
      - city
      - country
      - postcode
      - stateOrProvince
      - streetType
    properties:
      id:
        type: string
        description: Unique identifier of the place
      href:
        type: string
        description: Unique reference of the place
      city:
        type: string
        description: City that the address is in
      country:
        type: string
        description: Country that the address is in
      locality:
        type: string
        description: 'An area of defined or undefined boundaries within a local authority or other legislatively defined area, usually rural or semi rural in nature. [ANZLIC-STREET], or a suburb, a bounded locality within a city, town or shire principally of urban character [ANZLICSTREET]'
      name:
        type: string
        description: 'A user-friendly name for the place, such as [Paris Store], [London Store], [Main Home]'
      postcode:
        type: string
        description: 'descriptor for a postal delivery area, used to speed and simplify the delivery of mail (also know as zipcode)'
      postcodeExtension:
        type: string
        description: An extension of a postal code. E.g. the part following the dash in an american urban property address
      stateOrProvince:
        type: string
        description: the State or Province that the address is in
      streetName:
        type: string
        description: Name of the street or other street type
      streetNr:
        type: string
        description: Number identifying a specific property on a public street. It may be combined with streetNrLast for ranged addresses
      streetNrLast:
        type: string
        description: Last number in a range of street numbers allocated to a property
      streetNrLastSuffix:
        type: string
        description: Last street number suffix for a ranged address
      streetNrSuffix:
        type: string
        description: the first street number suffix
      streetSuffix:
        type: string
        description: A modifier denoting a relative direction
      streetType:
        type: string
        description: 'alley, avenue, boulevard, brae, crescent, drive, highway, lane, terrace, parade, place, tarn, way, wharf '
      geographicSubAddress:
        type: array
        items:
          $ref: '#/definitions/GeographicSubAddress'
      '@type':
        type: string
        description: 'When sub-classing, this defines the sub-class entity name'
  FormattedAddress:
    type: object
    description: 'A type of Address that has discrete fields for each type of boundary or identifier with the exception of street and more specific location details, which are combined into a maximum of two strings based on local postal addressing conventions.'
    required:
      - addrLine1
      - city
      - country
      - postcode
      - stateOrProvince
    properties:
      id:
        type: string
        description: Unique identifier of the place
      href:
        type: string
        description: Unique reference of the place
      addrLine1:
        type: string
        description: The first address line in a formatted address
      addrLine2:
        type: string
        description: The second address line in a formatted address
      city:
        type: string
        description: City that the address is in
      country:
        type: string
        description: Country that the address is in
      locality:
        type: string
        description: 'An area of defined or undefined boundaries within a local authority or other legislatively defined area, usually rural or semi rural in nature. [ANZLIC-STREET], or a suburb, a bounded locality within a city, town or shire principally of urban character [ANZLICSTREET]'
      name:
        type: string
        description: 'A user-friendly name for the place, such as [Paris Store], [London Store], [Main Home]'
      postcode:
        type: string
        description: 'descriptor for a postal delivery area, used to speed and simplify the delivery of mail (also know as zipcode)'
      postcodeExtension:
        type: string
        description: An extension of a postal code. E.g. the part following the dash in an american urban property address
      stateOrProvince:
        type: string
        description: the State or Province that the address is in
      '@type':
        type: string
        description: 'When sub-classing, this defines the sub-class entity name'
  GeographicAddress:
    type: object
    description: |-
      Structured textual way of describing how to find a Property in an urban area (country properties are often defined differently).
      Note : Address corresponds to SID UrbanPropertyAddress
    properties:
      id:
        type: string
        description: Unique identifier of the place
      href:
        type: string
        description: Unique reference of the place
      allowsNewSite:
        type: boolean
        description: 'This attribute specifies if a Buyer must use one of the known existing Service Sites at this location for any Products delivered to this Address. For example, if a particular building owner mandated that all interconnects be done in a shared Public Meet-Me-Room, this attribute would be set to False for that Address.'
      hasPublicSite:
        type: boolean
        description: This attribute specifies if that Address contains Service Sites that are public such as Meet-Me-Rooms at an interconnect location or a shared telecom room in the basement of a multi-tenant building
      name:
        type: string
        description: 'A user-friendly name for the place, such as [Paris Store], [London Store], [Main Home]'
      fieldedAddress:
        $ref: '#/definitions/FieldedAddress'
        description: 'A type of Address that has a discrete field and value for each type of boundary or identifier down to the lowest level of detail. For example “street number” is one field, “street name” is another field, etc.'
      formattedAddress:
        $ref: '#/definitions/FormattedAddress'
        description: 'A type of Address that has discrete fields for each type of boundary or identifier with the exception of street and more specific location details, which are combined into a maximum of two strings based on local postal addressing conventions.'
      geographicLocation:
        $ref: '#/definitions/MEFGeographicLocation'
        description: A set of coordinates (typically including latitude and longitude) that describes a particular location on earth.
      globalAddressId:
        $ref: '#/definitions/GlobalAddressId'
        description: A globally unique identifier controlled by a generally accepted independent administrative authority that specifies a fixed geographical location.
      '@schemaLocation':
        type: string
        format: uri
        description: A URI to a JSON-Schema file that defines additional attributes and relationships
      '@type':
        type: string
        description: 'When sub-classing, this defines the sub-class entity name'
  GeographicAddressValidation:
    type: object
    description: This resource is used to manage address validation request and response
    properties:
      id:
        type: string
        description: Unique identifier of the Address Validation
      href:
        type: string
        description: An URI used to access to the address validation resource
      provideAlternative:
        type: boolean
        description: Indicator provided by the requester to specify if alternate addresses must be provided in case of partial or fail result.
      validationDate:
        type: string
        format: date-time
        description: Date when the address validation is performed
      validationResult:
        type: string
        description: 'Result of the address validation (success, partial, fails)'
      submittedGeographicAddress:
        $ref: '#/definitions/MEFSubmittedGeographicAddress'
        description: 'the address as submitted to validation. MEF: Structure used by the buyer to request geographic address validation'
      validGeographicAddress:
        $ref: '#/definitions/MEFValidatedGeographicAddress'
        description: 'the correct form of the validated address in case of validation success. MEF: An address is a structured textual way of describing how to find a Property in an urban area (country properties are often defined differently).'
      '@baseType':
        type: string
        description: 'When sub-classing, this defines the super-class'
      '@schemaLocation':
        type: string
        format: uri
        description: A URI to a JSON-Schema file that defines additional attributes and relationships
      '@type':
        type: string
        description: 'When sub-classing, this defines the sub-class entity name'
  GeographicAddressValidation_Create:
    type: object
    description: |-
      This resource is used to manage address validation request and response
      Skipped properties: id,href,alternateGeographicAddress,validGeographicAddress,validationResult,validationDate,submittedGeographicAddress.formattedAddress.id,submittedGeographicAddress.fieldedAddress.id
    required:
      - submittedGeographicAddress
      - provideAlternative
    properties:
      provideAlternative:
        type: boolean
        description: Indicator provided by the requester to specify if alternate addresses must be provided in case of partial or fail result.
      submittedGeographicAddress:
        $ref: '#/definitions/MEFSubmittedGeographicAddress'
        description: 'the address as submitted to validation. MEF: Structure used by the buyer to request geographic address validation'
      '@baseType':
        type: string
        description: 'When sub-classing, this defines the super-class'
      '@schemaLocation':
        type: string
        format: uri
        description: A URI to a JSON-Schema file that defines additional attributes and relationships
      '@type':
        type: string
        description: 'When sub-classing, this defines the sub-class entity name'
  GeographicSubAddress:
    type: object
    description: |-
      Representation of a GeographicSubAddress 
      It is used for addressing within a property in an urban area (country properties are often defined differently). It may refer to a building, a building cluster, or a floor of a multistory building.
    properties:
      id:
        type: string
        description: Unique Identifier of the subAddress
      href:
        type: string
        description: Link to the subAddress
      buildingName:
        type: string
        description: allows for buildings that have well-known names
      levelNumber:
        type: string
        description: 'used where a level type may be repeated e.g. BASEMENT 1, BASEMENT 2'
      levelType:
        type: string
        description: describes level types within a building
      name:
        type: string
        description: Name of the subAddress to identify it with a meaningful identification
      privateStreetName:
        type: string
        description: private streets internal to a property (e.g. a university) may have internal names that are not recorded by the land title office.
      privateStreetNumber:
        type: string
        description: private streets numbers internal to a private street
      subUnit:
        type: array
        items:
          $ref: '#/definitions/MEFSubUnit'
        description: |-
          Representation of a MEFSubUnit 
          It is used for describing subunit within a sub-address  e.g.BERTH, FLAT, PIER, SUITE, SHOP, TOWER, UNIT, WHARF.
      '@type':
        type: string
        description: 'When sub-classing, this defines the sub-class entity name'
  MEFGeographicLocation:
    type: object
    description: A set of coordinates (typically including latitude and longitude) that describes a particular loca-tion on earth.
    required:
      - geographicPoint
      - spatialRef
    properties:
      id:
        type: string
        description: Unique identifier of the place
      href:
        type: string
        description: Unique reference of the place
      name:
        type: string
        description: 'A user-friendly name for the place, such as [Paris Store], [London Store], [Main Home]'
      spatialRef:
        type: string
        description: The spatial reference system used to determine the coordinates
      geographicPoint:
        $ref: '#/definitions/MEFGeographicPoint'
        description: a coordinate of a point.
      '@type':
        type: string
        description: 'When sub-classing, this defines the sub-class entity name'
  MEFGeographicPoint:
    type: object
    description: A MEFGeographicPoint defines a geographic point through coordinates.
    properties:
      x:
        type: string
        description: x coordinate (usually latitude)
      'y':
        type: string
        description: y coordinate (usually longitude)
  MEFSubUnit:
    type: object
    description: |-
      Representation of a MEFSubUnit 
      It is used for describing subunit within a sub-address  e.g.BERTH, FLAT, PIER, SUITE, SHOP, TOWER, UNIT, WHARF.
    required:
      - subUnitNumber
      - subUnitType
    properties:
      subUnitNumber:
        type: string
        description: |-
          the discriminator used for the subunit
          often just a simple number e.g. FLAT 5, may also be a range
      subUnitType:
        type: string
        description: |-
          the type of subunit
          e.g.BERTH, FLAT, PIER, SUITE, SHOP, TOWER, UNIT, WHARF
  MEFSubmittedGeographicAddress:
    type: object
    description: ' Structure used by the buyer to request geographic address validation'
    properties:
      fieldedAddress:
        $ref: '#/definitions/FieldedAddress'
        description: 'A type of Address that has a discrete field and value for each type of boundary or identifier down to the lowest level of detail. For example “street number” is one field, “street name” is another field, etc. This structure is used in the request addressValidation only.'
      formattedAddress:
        $ref: '#/definitions/FormattedAddress'
        description: 'A type of Address that has discrete fields for each type of boundary or identifier with the exception of street and more specific location details, which are combined into a maximum of two strings based on local postal addressing conventions.'
      '@schemaLocation':
        type: string
        format: uri
        description: A URI to a JSON-Schema file that defines additional attributes and relationships
      '@type':
        type: string
        description: 'When sub-classing, this defines the sub-class Extensible name'
  MEFValidatedGeographicAddress:
    type: object
    description: ' Structure used by the buyer to request geographic address validation'
    required:
      - isBestMatch
    properties:
      id:
        type: string
        description: Identifier of the validated Address proposal
      allowsNewSite:
        type: boolean
        description: 'This attribute specifies if a Buyer must use one of the known existing Service Sites at this location for any Products delivered to this Address. For example, if a particular building owner mandated that all interconnects be done in a shared Public Meet-Me-Room, this attribute would be set to False for that Address.'
      hasPublicSite:
        type: boolean
        description: This attribute specifies if that Address contains Service Sites that are public such as Meet-Me-Rooms at an interconnect location or a shared telecom room in the basement of a multi-tenant building
      isBestMatch:
        type: boolean
        description: 'For each Address returned, this attribute specifies if the Seller believes this is the best match to the Buyer specified Address. Setting this to TRUE also represents that the Seller believes this is likely a direct match to the Buyer Specified Address.'
      fieldedAddress:
        $ref: '#/definitions/FieldedAddress'
        description: 'A type of Address that has a discrete field and value for each type of boundary or identifier down to the lowest level of detail. For example “street number” is one field, “street name” is another field, etc. This structure is used in the request addressValidation only.'
      formattedAddress:
        $ref: '#/definitions/FormattedAddress'
        description: 'A type of Address that has discrete fields for each type of boundary or identifier with the exception of street and more specific location details, which are combined into a maximum of two strings based on local postal addressing conventions.'
      '@schemaLocation':
        type: string
        format: uri
        description: A URI to a JSON-Schema file that defines additional attributes and relationships
      '@type':
        type: string
        description: 'When sub-classing, this defines the sub-class Extensible name'
  GlobalAddressId:
    allOf:
      - $ref: '#/definitions/RelatedPlaceRefOrValue'
      - type: object
        required:
          - externalReferenceId
          - externalReferenceType
        properties:
          externalReferenceId:
            type: string
            description: >-
              A reference to an address by id; this would include such things as
              CLLI (Common Language Location Identifier) code
          externalReferenceType:
            type: string
            description: >-
              The type of the reference. For North American providers this would
              normally be CLLI (Common Language Location Identifier) code
    description: >-
      A globally unique identifier controlled by a generally accepted
      independent administrative authority that specifies a fixed geographical
      location.
  RelatedPlaceRefOrValue:
    type: object
    required:
      - '@type'
      - role
    discriminator: '@type'
    properties:
      '@schemaLocation':
        type: string
        format: uri
        description: >-
          A URI to a JSON-Schema file that defines additional attributes and
          relationships.
          May be used to define additional related place types.
          Usage of this attribute must be agreed between Buyer and Seller.
      '@type':
        type: string
        description: >
          This filed is used as discriminator and is used between different
          place representations. This type might discriminate for additional related place as defined
          in '@schemaLocation'.
      role:
        type: string
        description: Role of this place
    description: Place defines the places where the products' quotation must be done.
  Error:
    description: |
      Standard Class used to describe API response error
      Not intended to be use directly only via specialization which defines a code
    type: object
    required:
      - reason
    properties:
      reason:
        type: string
        description: Explanation of the reason for the error which can be shown to a client user.
        maxLength: 255
      message:
        type: string
        description: >-
          Text that provides more details and corrective actions related to the
          error. This can be shown to a client user.
      status:
        type: string
        description: HTTP Error code extension
      referenceError:
        type: string
        format: uri
        description: URI of documentation describing the error.
  Error400:
    description: |-
      Bad Request
    allOf:
      - $ref: "#/definitions/Error"
      - type: object 
        required:
          - reason
          - code
        properties:
          code:
            description: |- 
              List of supported error codes:
              - missingQueryParameter: Missing query-string parameter
              - missingQueryValue: Invalid query-string parameter value
              - invalidQuery: Invalid Query
              - invalidBody: Invalid body
            type: string
            enum:
              - missingQueryParameter
              - missingQueryValue
              - invalidQuery
              - invalidBody
  Error401:
    description: |-
      Unauthorized
    allOf:
      - $ref: "#/definitions/Error"
      - type: object 
        required:
          - reason
          - code
        properties:
          code:
            description: |- 
              List of supported error codes:
              - missingCredentials: Missing credentials
              - invalidCredentials: Invalid OR expired credentials
            type: string
            enum:
             - missingCredentials
             - invalidCredentials
  Error403:
    description: |-
      Forbidden
    allOf:
      - $ref: "#/definitions/Error"
      - type: object 
        required:
          - reason
          - code
        properties:
          code:
            description: |- 
              List of supported error codes:
              - accessDenied: Access denied
              - forbiddenRequester: Forbidden requester
              - tooManyUsers: Too many users
            type: string
            enum:
             - accessDenied
             - forbiddenRequester
             - tooManyUsers
  Error404:
    description: |-
      Resource for the requested path not found
    allOf:
      - $ref: "#/definitions/Error"
      - type: object 
        required:
          - reason
          - code
        properties:
          code:
            description: |- 
              List of supported error codes:
              - notFound: Resource not found
            type: string
            enum:
             - notFound
  Error409:
    description: |-
      Conflict
    allOf:
      - $ref: "#/definitions/Error"
      - type: object 
        required:
          - reason
          - code
        properties:
          code:
            description: |- 
              List of supported error codes:
              - conflict: conflicting resource.
            type: string
            enum:
             - conflict
  Error422:
    description: |-
      Unprocessable entity due to business validation problem
    allOf:
      - $ref: "#/definitions/Error"
      - type: object 
        required:
          - reason
          - code
        properties:
          code:
            description: |
              List of supported error codes:
                - missingProperty: the property the Seller has expected is not present in the payload
                - invalidValue: the property has an incorrect value
                - invalidFormat: the property value does not comply to expected value format
                - referenceNotFound: the object referenced by the property cannot be identified in the Seller system
                - unexpectedProperty: additional property, not expected by the Seller has been provided
                - otherIssue: other problem was identified (detailed information provided in a reason)
            type: string
            enum:
              - missingProperty
              - invalidValue
              - invalidFormat
              - referenceNotFound
              - unexpectedProperty
              - otherIssue
          propertyPath:
            type: string
            description: |
              A pointer to a particular property of the payload that caused the validation issue.
              Defined using JsonPath format (https://goessner.net/articles/JsonPath/)
  Error500:
    description: |-
      Internal Server Error
    allOf:
      - $ref: "#/definitions/Error"
      - type: object 
        required:
          - reason
          - code
        properties:
          code:
            description: |- 
              List of supported error codes:
              - internalError: Internal server error
            type: string
            enum:
             - internalError