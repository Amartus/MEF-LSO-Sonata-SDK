
{
  "swagger": "2.0",
  "info": {
    "description": "The scope of this MEF API is to provide the ability  for a Service Provider’s (Buyer) operational support system to retrieve from a Partner’s (Seller) Inventory management system a set of product instances based upon a filter of product inventory attributes, or a specific product instance based upon a product identifier.",
    "version": "1.0.0",
    "title": "API ProductInventory",
    "x-logo": {
      "url": "/redoc/logo.png",
      "backgroundColor": "#FFFFFF"
    }
  },
  
  "host": "api.mef.com",
  "basePath":	"/",
  "schemes": [
    "http"
  ],
  "consumes": [
    "application/json;charset=utf-8"
  ],
  "produces": [
    "application/json;charset=utf-8"
  ],
  "tags": [
  
    {
      "name": "Product",
      "description": ""
    },
    {
      "name": "Hub",
      "description": ""
    }
  ],
  "paths": {
      "/product/{productId}": {
      "get": {
        "tags": [
           "Product"
        ],        
        "operationId": "productGet",
        "summary": "productGet (by id)",
        "description": "This operation is used to retrieve a single product inventory instance based upon a specified product id.\n\nSpecific business errors for current operation will be encapsulated in\n\nHTTP Response 422 Unprocessable entity\n",
        "deprecated": false,
        
        "parameters": [
          
          {
            "name": "productId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": ""
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/Product"
            }

          },
          "400": {
            
            "description": "Bad Request\n\nList of supported error codes:\n- 20: Invalid URL parameter value\n- 21: Missing body\n- 22: Invalid body\n- 23: Missing body field\n- 24: Invalid body field\n- 25: Missing header\n- 26: Invalid header value\n- 27: Missing query-string parameter\n- 28: Invalid query-string parameter value",
            "schema": {
            
              "$ref": "#/definitions/ErrorRepresentation"
            }
          },
          "401": {
            
            "description": "Unauthorized\n\nList of supported error codes:\n- 40: Missing credentials\n- 41: Invalid credentials\n- 42: Expired credentials",
            "schema": {
            
              "$ref": "#/definitions/ErrorRepresentation"
            }
          },
          "403": {
            
            "description": "Forbidden\n\nList of supported error codes:\n- 50: Access denied\n- 51: Forbidden requester\n- 52: Forbidden user\n- 53: Too many requests",
            "schema": {
            
              "$ref": "#/definitions/ErrorRepresentation"
            }
          },
          "404": {
            
            "description": "Not Found\n\nList of supported error codes:\n- 60: Resource not found",
            "schema": {
            
              "$ref": "#/definitions/ErrorRepresentation"
            }
          },
          "422": {
            
            "description": "Unprocessable entity\n\nFunctional error",
            "schema": {
            
              "$ref": "#/definitions/ErrorRepresentation"
            }
          },
          "503": {
            
            "description": "Service Unavailable\n\nList of supported error codes:\n- 5: The service is temporarily unavailable\n- 6:  API is over capacity, retry later !",
            "schema": {
            
              "$ref": "#/definitions/ErrorRepresentation"
            }
          }
        }
      }
    },
      "/product": {
      "get": {
        "tags": [
           "Product"
        ],        
        "operationId": "productFind",
        "summary": "productFind (list)",
        "description": "This operation is used to retrieve one or more product inventory instances based upon filter criteria specified on input.\n\nSpecific business errors for current operation will be encapsulated in\n\nHTTP Response 422 Unprocessable entity\n",
        "deprecated": false,
        
        "parameters": [
          
          {
            "name": "status",
            "required": false,
            "in": "query",
            "description": "",
            
              "type": "string"
          },
          {
            "name": "productSpecificationId",
            "required": false,
            "in": "query",
            "description": "",
            
              "type": "string"
          },
          {
            "name": "productOfferingId",
            "required": false,
            "in": "query",
            "description": "",
            
              "type": "string"
          },
          {
            "name": "relatedPartyId",
            "required": false,
            "in": "query",
            "description": "",
            
              "type": "string"
          },
          {
            "name": "relatedPartyRole",
            "required": false,
            "in": "query",
            "description": "",
            
              "type": "string"
          },
          {
            "name": "place",
            "required": false,
            "in": "body",
            "description": "",
            "schema": {
              "$ref": "#/definitions/PlaceRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
              "$ref": "#/definitions/ProductSummary"
              }
            }

          },
          "400": {
            
            "description": "Bad Request\n\nList of supported error codes:\n- 20: Invalid URL parameter value\n- 21: Missing body\n- 22: Invalid body\n- 23: Missing body field\n- 24: Invalid body field\n- 25: Missing header\n- 26: Invalid header value\n- 27: Missing query-string parameter\n- 28: Invalid query-string parameter value",
            "schema": {
            
              "$ref": "#/definitions/ErrorRepresentation"
            }
          },
          "401": {
            
            "description": "Unauthorized\n\nList of supported error codes:\n- 40: Missing credentials\n- 41: Invalid credentials\n- 42: Expired credentials",
            "schema": {
            
              "$ref": "#/definitions/ErrorRepresentation"
            }
          },
          "403": {
            
            "description": "Forbidden\n\nList of supported error codes:\n- 50: Access denied\n- 51: Forbidden requester\n- 52: Forbidden user\n- 53: Too many requests",
            "schema": {
            
              "$ref": "#/definitions/ErrorRepresentation"
            }
          },
          "404": {
            
            "description": "Not Found\n\nList of supported error codes:\n- 60: Resource not found",
            "schema": {
            
              "$ref": "#/definitions/ErrorRepresentation"
            }
          },
          "422": {
            
            "description": "Unprocessable entity\n\nFunctional error",
            "schema": {
            
              "$ref": "#/definitions/ErrorRepresentation"
            }
          },
          "503": {
            
            "description": "Service Unavailable\n\nList of supported error codes:\n- 5: The service is temporarily unavailable\n- 6:  API is over capacity, retry later !",
            "schema": {
            
              "$ref": "#/definitions/ErrorRepresentation"
            }
          }
        }
      }
    },
      "/hub": {
      "post": {
        "tags": [
           "Hub"
        ],        
        "operationId": "hubCreate",
        "summary": "create hub",
        "description": "\n\nSpecific business errors for current operation will be encapsulated in\n\nHTTP Response 422 Unprocessable entity\n",
        "deprecated": false,
        
        "parameters": [
          
          {
            "name": "Hub",
            "required": true,
            "in": "body",
            "description": "",
            "schema": {
              "$ref": "#/definitions/Hub"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/Hub"
            }

          },
          "400": {
            
            "description": "Bad Request\n\nList of supported error codes:\n- 20: Invalid URL parameter value\n- 21: Missing body\n- 22: Invalid body\n- 23: Missing body field\n- 24: Invalid body field\n- 25: Missing header\n- 26: Invalid header value\n- 27: Missing query-string parameter\n- 28: Invalid query-string parameter value",
            "schema": {
            
              "$ref": "#/definitions/ErrorRepresentation"
            }
          },
          "401": {
            
            "description": "Unauthorized\n\nList of supported error codes:\n- 40: Missing credentials\n- 41: Invalid credentials\n- 42: Expired credentials",
            "schema": {
            
              "$ref": "#/definitions/ErrorRepresentation"
            }
          },
          "403": {
            
            "description": "Forbidden\n\nList of supported error codes:\n- 50: Access denied\n- 51: Forbidden requester\n- 52: Forbidden user\n- 53: Too many requests",
            "schema": {
            
              "$ref": "#/definitions/ErrorRepresentation"
            }
          },
          "404": {
            
            "description": "Not Found\n\nList of supported error codes:\n- 60: Resource not found",
            "schema": {
            
              "$ref": "#/definitions/ErrorRepresentation"
            }
          },
          "422": {
            
            "description": "Unprocessable entity\n\nFunctional error",
            "schema": {
            
              "$ref": "#/definitions/ErrorRepresentation"
            }
          },
          "503": {
            
            "description": "Service Unavailable\n\nList of supported error codes:\n- 5: The service is temporarily unavailable\n- 6:  API is over capacity, retry later !",
            "schema": {
            
              "$ref": "#/definitions/ErrorRepresentation"
            }
          }
        }
      },
      "get": {
        "tags": [
           "Hub"
        ],        
        "operationId": "hubFind",
        "summary": "find hub",
        "description": "\n\nSpecific business errors for current operation will be encapsulated in\n\nHTTP Response 422 Unprocessable entity\n",
        "deprecated": false,
        
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
              "$ref": "#/definitions/Hub"
              }
            }

          },
          "400": {
            
            "description": "Bad Request\n\nList of supported error codes:\n- 20: Invalid URL parameter value\n- 21: Missing body\n- 22: Invalid body\n- 23: Missing body field\n- 24: Invalid body field\n- 25: Missing header\n- 26: Invalid header value\n- 27: Missing query-string parameter\n- 28: Invalid query-string parameter value",
            "schema": {
            
              "$ref": "#/definitions/ErrorRepresentation"
            }
          },
          "401": {
            
            "description": "Unauthorized\n\nList of supported error codes:\n- 40: Missing credentials\n- 41: Invalid credentials\n- 42: Expired credentials",
            "schema": {
            
              "$ref": "#/definitions/ErrorRepresentation"
            }
          },
          "403": {
            
            "description": "Forbidden\n\nList of supported error codes:\n- 50: Access denied\n- 51: Forbidden requester\n- 52: Forbidden user\n- 53: Too many requests",
            "schema": {
            
              "$ref": "#/definitions/ErrorRepresentation"
            }
          },
          "404": {
            
            "description": "Not Found\n\nList of supported error codes:\n- 60: Resource not found",
            "schema": {
            
              "$ref": "#/definitions/ErrorRepresentation"
            }
          },
          "422": {
            
            "description": "Unprocessable entity\n\nFunctional error",
            "schema": {
            
              "$ref": "#/definitions/ErrorRepresentation"
            }
          },
          "503": {
            
            "description": "Service Unavailable\n\nList of supported error codes:\n- 5: The service is temporarily unavailable\n- 6:  API is over capacity, retry later !",
            "schema": {
            
              "$ref": "#/definitions/ErrorRepresentation"
            }
          }
        }
      }
    },
      "/hub/{hubId}": {
      "get": {
        "tags": [
           "Hub"
        ],        
        "operationId": "hubGet",
        "summary": "get hub",
        "description": "\n\nSpecific business errors for current operation will be encapsulated in\n\nHTTP Response 422 Unprocessable entity\n",
        "deprecated": false,
        
        "parameters": [
          
          {
            "name": "hubId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": ""
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/Hub"
            }

          },
          "400": {
            
            "description": "Bad Request\n\nList of supported error codes:\n- 20: Invalid URL parameter value\n- 21: Missing body\n- 22: Invalid body\n- 23: Missing body field\n- 24: Invalid body field\n- 25: Missing header\n- 26: Invalid header value\n- 27: Missing query-string parameter\n- 28: Invalid query-string parameter value",
            "schema": {
            
              "$ref": "#/definitions/ErrorRepresentation"
            }
          },
          "401": {
            
            "description": "Unauthorized\n\nList of supported error codes:\n- 40: Missing credentials\n- 41: Invalid credentials\n- 42: Expired credentials",
            "schema": {
            
              "$ref": "#/definitions/ErrorRepresentation"
            }
          },
          "403": {
            
            "description": "Forbidden\n\nList of supported error codes:\n- 50: Access denied\n- 51: Forbidden requester\n- 52: Forbidden user\n- 53: Too many requests",
            "schema": {
            
              "$ref": "#/definitions/ErrorRepresentation"
            }
          },
          "404": {
            
            "description": "Not Found\n\nList of supported error codes:\n- 60: Resource not found",
            "schema": {
            
              "$ref": "#/definitions/ErrorRepresentation"
            }
          },
          "422": {
            
            "description": "Unprocessable entity\n\nFunctional error",
            "schema": {
            
              "$ref": "#/definitions/ErrorRepresentation"
            }
          },
          "503": {
            
            "description": "Service Unavailable\n\nList of supported error codes:\n- 5: The service is temporarily unavailable\n- 6:  API is over capacity, retry later !",
            "schema": {
            
              "$ref": "#/definitions/ErrorRepresentation"
            }
          }
        }
      },
      "delete": {
        "tags": [
           "Hub"
        ],        
        "operationId": "hubDelete",
        "summary": "delete hub",
        "description": "\n\nSpecific business errors for current operation will be encapsulated in\n\nHTTP Response 422 Unprocessable entity\n",
        "deprecated": false,
        
        "parameters": [
          
          {
            "name": "hubId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": ""
          }
        ],
        "responses": {
          "204": {
            "description": "Success"

          },
          "400": {
            
            "description": "Bad Request\n\nList of supported error codes:\n- 20: Invalid URL parameter value\n- 21: Missing body\n- 22: Invalid body\n- 23: Missing body field\n- 24: Invalid body field\n- 25: Missing header\n- 26: Invalid header value\n- 27: Missing query-string parameter\n- 28: Invalid query-string parameter value",
            "schema": {
            
              "$ref": "#/definitions/ErrorRepresentation"
            }
          },
          "401": {
            
            "description": "Unauthorized\n\nList of supported error codes:\n- 40: Missing credentials\n- 41: Invalid credentials\n- 42: Expired credentials",
            "schema": {
            
              "$ref": "#/definitions/ErrorRepresentation"
            }
          },
          "403": {
            
            "description": "Forbidden\n\nList of supported error codes:\n- 50: Access denied\n- 51: Forbidden requester\n- 52: Forbidden user\n- 53: Too many requests",
            "schema": {
            
              "$ref": "#/definitions/ErrorRepresentation"
            }
          },
          "404": {
            
            "description": "Not Found\n\nList of supported error codes:\n- 60: Resource not found",
            "schema": {
            
              "$ref": "#/definitions/ErrorRepresentation"
            }
          },
          "422": {
            
            "description": "Unprocessable entity\n\nFunctional error",
            "schema": {
            
              "$ref": "#/definitions/ErrorRepresentation"
            }
          },
          "503": {
            
            "description": "Service Unavailable\n\nList of supported error codes:\n- 5: The service is temporarily unavailable\n- 6:  API is over capacity, retry later !",
            "schema": {
            
              "$ref": "#/definitions/ErrorRepresentation"
            }
          }
        }
      }
    }
  },
"definitions": {
  
    "ProductStatus": {
      "description": "",
      
      "type": "string",
      "enum": [
  	          "ACTIVE",
  	          "PENDING_CHANGE",
  	          "SUSPENDED",
  	          "PENDING_TERMINATE",
  	          "TERMINATED"]
      
    },
    "RelationshipType": {
      "description": "",
      
      "type": "string",
      "enum": [
  	          "RELIES_ON",
  	          "BUNDLED",
  	          "COMES_FROM"]
      
    },

    "ErrorRepresentation": {
      "description": "",

      
      "required": [
          
            "code",
            "reason"
      ],
      "type": "object",
      "properties": {
        "code": {
          "description": "Application related code (as defined in the API or from a common list)",
              "type": "integer",
              "format": "int32"
        },
        "reason": {
          "description": "Text that explains the reason for error. This can be shown to a client user.",
              "type": "string"
        },
        "message": {
          "description": "Text that provide more details and corrective actions related to the error. This can be shown to a client user.",
              "type": "string"
        },
        "status": {
          "description": "http error code extension like 400-2",
              "type": "integer",
              "format": "int32"
        },
        "referenceError": {
          "description": "url pointing to documentation describing the error",
              "type": "string"
        },
        "@type": {
          "description": "The class type of a REST resource",
              "type": "string"
        },
        "@schemaLocation": {
          "description": "it provides a link to the schema describing a REST resource",
              "type": "string"
        }
      }
      
    },

    "Product": {
      "description": "It defines the set of goods and services, offered to a market by a Party that is playing an appropriate PartyRole, which is purchased by a Customer.",

      
      "required": [
          
            "id",
            "status",
            "startDate"
      ],
      "type": "object",
      "properties": {
        "id": {
          "description": "Unique identifier of the product in the product domain.",
              "type": "string"
        },
        "href": {
          "description": "Reference of the product",
              "type": "string"
        },
        "status": {
          
           "$ref": "#/definitions/ProductStatus"
        },
        "startDate": {
          "description": "Start date is when the product instance is created in the inventory database with a timestamp.",
              "type": "string",
              "format": "date-time"
        },
        "terminationDate": {
          "description": "Termination date (commercial) is when the product has been terminated (when the disconnect in the product order has been processed). Timestamp of when the status changes to terminated.",
              "type": "string",
              "format": "date-time"
        },
        "place": {
          
          "type": "array",
          "items": {
              "$ref": "#/definitions/Place"
          }
        },
        "productOffering": {
          
              "$ref": "#/definitions/ProductOfferingRef"
        },
        "productSpecification": {
          
              "$ref": "#/definitions/ProductSpecificationRef"
        },
        "productRelationship": {
          
          "type": "array",
          "items": {
              "$ref": "#/definitions/ProductRelationship"
          }
        },
        "billingAccount": {
          
          "type": "array",
          "items": {
              "$ref": "#/definitions/BillingAccountRef"
          }
        },
        "relatedParty": {
          
          "type": "array",
          "items": {
              "$ref": "#/definitions/RelatedParty"
          }
        },
        "productOrderItem": {
          
          "type": "array",
          "items": {
              "$ref": "#/definitions/ProductOrderItem"
          }
        },
        "@type": {
          "description": "The type of product if specialization",
              "type": "string"
        },
        "@baseType": {
          "description": "the Base Type of the product if specialization",
              "type": "string"
        },
        "@schemaLocation": {
          "description": "A pointer to a file describing extension attributes (if used)",
              "type": "string"
        }
      }
      
    },

    "ProductOfferingRef": {
      "description": "A product offering defines the commercial terms under which a product specification may be instantiated",

      
      "required": [
          
            "id"
      ],
      "type": "object",
      "properties": {
        "id": {
          "description": "A unique product offering identifier. This identifier is provided by the seller and communicated to the buyer during the on-boarding process.",
              "type": "string"
        }
      }
      
    },

    "ProductSpecificationRef": {
      "description": "A ProductSpec describes the invariant properties (i.e., features) that a given set of Products MAY have. These properties provide the information needed to plan, construct, allocate, and/or retire the Services and Resources from the operator environment needed to deliver the Product.",

      
      "required": [
          
            "id"
      ],
      "type": "object",
      "properties": {
        "id": {
          "description": "A unique identifier of the product spec.",
              "type": "string"
        },
        "describing": {
          
              "$ref": "#/definitions/Describing"
        }
      }
      
    },

    "ProductRelationship": {
      "description": "A product has relationships to other products.",

      
      "required": [
          
            "type",
            "product"
      ],
      "type": "object",
      "properties": {
        "type": {
          
           "$ref": "#/definitions/RelationshipType"
        },
        "product": {
          
              "$ref": "#/definitions/ProductRef"
        }
      }
      
    },

    "BillingAccountRef": {
      "description": "An arrangement that a customer has with an enterprise that provides products to the customer.",

      
      "required": [
          
            "id"
      ],
      "type": "object",
      "properties": {
        "id": {
          "description": "An unique identifier of the billing account",
              "type": "string"
        }
      }
      
    },

    "RelatedParty": {
      "description": "An entity or organization that is related to the product, such as the buyer, the seller, etc.",

      
      "required": [
          
            "id",
            "role",
            "name",
            "number"
      ],
      "type": "object",
      "properties": {
        "id": {
          "description": "A unique identifier of the related party.",
              "type": "string"
        },
        "href": {
          "description": "Reference of the related party",
              "type": "string"
        },
        "role": {
          "description": "Role of the related party",
              "type": "string"
        },
        "name": {
          "description": "Name of the related party",
              "type": "string"
        },
        "number": {
          "description": "The telephone number of the related party.",
              "type": "string"
        },
        "numberExtension": {
          "description": "The telephone extension of the related party.",
              "type": "string"
        },
        "emailAddress": {
          "description": "The email address of the related party.",
              "type": "string"
        }
      }
      
    },

    "ProductRef": {
      "description": "",

      
      "required": [
          
            "id"
      ],
      "type": "object",
      "properties": {
        "id": {
          "description": "Unique identifier of the product",
              "type": "string"
        },
        "href": {
          "description": "Reference of the product",
              "type": "string"
        }
      }
      
    },

    "Place": {
      "description": "Place answers the question \"Where?\" It is an abstract class.",

      
      "required": [
          
            "id",
            "role",
            "@referredType"
      ],
      "type": "object",
      "properties": {
        "id": {
          "description": "Unique identifier of the place.",
              "type": "string"
        },
        "href": {
          "description": "href of the place",
              "type": "string"
        },
        "role": {
          "description": "The role that the place plays, e.g. \"Billing Address\", \"UNI Site\", or \"ENNI Site\".",
              "type": "string"
        },
        "@referredType": {
          "description": "A specialization of the place class. The type to which the place is referring. This may be \"Site\", \"FormattedAddress\", \"FieldedAddress\", \"ReferencedAddress\", or \"GeographicLocation\".",
              "type": "string"
        },
        "@schemaLocation": {
          "description": "A target to the file desribing the place",
              "type": "string"
        }
      }
      
    },

    "ProductOrderItem": {
      "description": "An enumeration of the entities that are part of this order expressed in terms of a Product Offering or a Product (for a change order).",

      
      "required": [
          
            "id",
            "productOrderId"
      ],
      "type": "object",
      "properties": {
        "id": {
          "description": "Identifier of the line item (generally it is a sequence number 01, 02, 03, ...)",
              "type": "string"
        },
        "href": {
          "description": "href to the productOrder",
              "type": "string"
        },
        "productOrderId": {
          "description": "Id of the productOrder",
              "type": "string"
        }
      }
      
    },

    "Describing": {
      "description": "Technical structure",

      
      "required": [
          
            "@type",
            "@schemaLocation"
      ],
      "type": "object",
      "properties": {
        "@type": {
          "description": "Type of the resource",
              "type": "string"
        },
        "@schemaLocation": {
          "description": "An URL to target a description file",
              "type": "string"
        }
      }
      
    },

    "ProductSummary": {
      "description": "",

      
      "required": [
          
            "id",
            "status"
      ],
      "type": "object",
      "properties": {
        "id": {
          "description": "Unique identifier of the product",
              "type": "string"
        },
        "href": {
          "description": "Reference of the product",
              "type": "string"
        },
        "status": {
          
           "$ref": "#/definitions/ProductStatus"
        },
        "startDate": {
          "description": "The date from which the product starts",
              "type": "string",
              "format": "date-time"
        },
        "productOffering": {
          
              "$ref": "#/definitions/ProductOfferingRef"
        },
        "productSpecification": {
          
              "$ref": "#/definitions/ProductSpecificationSummary"
        }
      }
      
    },

    "ProductSpecificationSummary": {
      "description": "",

      
      "required": [
          
            "id"
      ],
      "type": "object",
      "properties": {
        "id": {
          "description": "Unique identifier of the product specification",
              "type": "string"
        }
      }
      
    },

    "Hub": {
      "description": "",

      
      "type": "object",
      "properties": {
        "id": {
          "description": "",
              "type": "string"
        },
        "query": {
          "description": "",
              "type": "string"
        },
        "callback": {
          "description": "",
              "type": "string"
        }
      }
      
    },

    "PlaceRequest": {
      "description": "",

      
      "required": [
          
            "id"
      ],
      "type": "object",
      "properties": {
        "id": {
          "description": "Unique identifier of the place.",
              "type": "string"
        },
        "type": {
          "description": "The type to which the place is referring. This may be \"Site\", \"FormattedAddress\", \"FieldedAddress\", \"ReferencedAddress\", or \"GeographicLocation\".",
              "type": "string"
        }
      }
      
    }
  }
}
	
