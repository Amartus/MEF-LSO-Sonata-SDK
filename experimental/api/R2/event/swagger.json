
{
  "swagger": "2.0",
  "info": {
    "description": "The MEF Event API is used to manage notification. When side A (for example buyer) subscribed to side B (for example seller) to get notification, we need an API supplied on A side to allow side B to post a notification. This API will only have a POST operation and will allow B side to trigger an event on A side.\nNotifications are used with same pattern within all MEF API providing notifications.",
    "version": "1.0.0_inProgress",
    "title": "API Event",
    "x-logo": {
      "url": "/redoc/logo.png",
      "backgroundColor": "#FFFFFF"
    }
  },
  
  "host": "api.mef.com",
  "basePath":	"/",
  "schemes": [
    "http"
  ],
  "consumes": [
    "application/json;charset=utf-8"
  ],
  "produces": [
    "application/json;charset=utf-8"
  ],
  "tags": [
  
    {
      "name": "Event",
      "description": ""
    }
  ],
  "paths": {
      "/event": {
      "post": {
        "tags": [
           "Event"
        ],        
        "operationId": "eventCreate",
        "summary": "createEvent",
        "description": "The create event is used by the seller to trigger (POST) a notification to the buyer. The buyer has previously subscribed to receive notification\n\nSpecific business errors for current operation will be encapsulated in\n\nHTTP Response 422 Unprocessable entity\n",
        "deprecated": false,
        
        "parameters": [
          
          {
            "name": "Event",
            "required": true,
            "in": "body",
            "description": "",
            "schema": {
              "$ref": "#/definitions/Event"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/Event"
            }

          },
          "400": {
            
            "description": "Bad Request\n\nList of supported error codes:\n- 20: Invalid URL parameter value\n- 21: Missing body\n- 22: Invalid body\n- 23: Missing body field\n- 24: Invalid body field\n- 25: Missing header\n- 26: Invalid header value\n- 27: Missing query-string parameter\n- 28: Invalid query-string parameter value",
            "schema": {
            
              "$ref": "#/definitions/ErrorRepresentation"
            }
          },
          "401": {
            
            "description": "Unauthorized\n\nList of supported error codes:\n- 40: Missing credentials\n- 41: Invalid credentials\n- 42: Expired credentials",
            "schema": {
            
              "$ref": "#/definitions/ErrorRepresentation"
            }
          },
          "403": {
            
            "description": "Forbidden\n\nList of supported error codes:\n- 50: Access denied\n- 51: Forbidden requester\n- 52: Forbidden user\n- 53: Too many requests",
            "schema": {
            
              "$ref": "#/definitions/ErrorRepresentation"
            }
          },
          "422": {
            
            "description": "Unprocessable entity\n\nFunctional error",
            "schema": {
            
              "$ref": "#/definitions/ErrorRepresentation"
            }
          },
          "500": {
            
            "description": "Internal Server Error\n\nList of supported error codes:\n- 1: Internal error",
            "schema": {
            
              "$ref": "#/definitions/ErrorRepresentation"
            }
          },
          "503": {
            
            "description": "Service Unavailable\n\nList of supported error codes:\n- 5: The service is temporarily unavailable\n- 6:  API is over capacity, retry later !",
            "schema": {
            
              "$ref": "#/definitions/ErrorRepresentation"
            }
          }
        }
      }
    }
  },
"definitions": {
  

    "ErrorRepresentation": {
      "description": "",

      
      "required": [
          
            "code"
      ],
      "type": "object",
      "properties": {
        "code": {
          "description": "",
              "type": "integer",
              "format": "int32"
        },
        "reason": {
          "description": "",
              "type": "string"
        },
        "message": {
          "description": "",
              "type": "string"
        },
        "status": {
          "description": "",
              "type": "integer",
              "format": "int32"
        },
        "referenceError": {
          "description": "",
              "type": "string"
        },
        "@type": {
          "description": "",
              "type": "string"
        },
        "@schemaLocation": {
          "description": "",
              "type": "string"
        }
      }
      
    },

    "Event": {
      "description": "An Event will be triggered for each time a notification is send to a listener.",

      
      "required": [
          
            "eventId",
            "eventTime",
            "eventType",
            "event"
      ],
      "type": "object",
      "properties": {
        "eventId": {
          "description": "id of the event",
              "type": "string"
        },
        "eventTime": {
          "description": "TimeStamp of the event",
              "type": "string",
              "format": "date-time"
        },
        "eventType": {
          "description": "Event Type - it is depends to the notification subscribed",
              "type": "string"
        },
        "event": {
          
              "$ref": "#/definitions/EventRepresentation"
        }
      }
      
    },

    "EventRepresentation": {
      "description": "",

      
      "type": "object",
      "properties": {
        "comment": {
          "description": "",
              "type": "string"
        },
        "resource": {
          "description": "",
              "type": "string"
        }
      }
      
    }
  }
}
	